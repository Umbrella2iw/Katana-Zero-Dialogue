<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Dialogue Setting
textSequence = ds_queue_create();

speaker = noone;
newSpeaker = noone;

// roundrect
rectSize[0] = 0; rectSize[1] = 0;
targetRectSize[0] = 0; targetRectSize[1] = 0;
rectPos[0] = 0; rectPos[1] = 0;
// margin: 0 -&gt; top | 1 -&gt; down | 2 -&gt; left | 3 -&gt; right
rectMargin[0] = 10; rectMargin[1] = 10;
rectMargin[2] = 10; rectMargin[3] = 10;
linearTime = 5;
triSideLength = 5; triOffsetY = 8;
// set the position of each side of triangle
// b(1)-----a(0)
//    c(2)
for (var i = 0; i &lt; 3; i++)
{
    triSideX[i] = 0;
    triSideY[i] = 0;
}
// set the maximum width of dialogue.
maximumWidth = 500;

// animation
animTotalSteps = 25;
animStepCounter = 0;
animOpen = false;
animClose = false;

// text
textPosX = 0;
textPosY = 0;

curText = "";
curTextLength = -1;
curTextCounter = 1;
curTextColor = c_white;

nextCharTimer = 0;
nextCharTimerAdditional = 0;
nextCharInterval = 2;

shaking = false;
shakingType = -1;
shakingDuration = -1;
shakingTimer = 0;
shakingVibration = 4;
// record shake screen view
shakingOriViewX = -1; shakingOriViewY = -1;
shakingOffsetX = 0; shakingOffsetY = 0;

floating = false;
floatingVibration = 10;

alarm[0] = 1;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Dialogue Rich Text Description
/*
* Change to a new line: \n
** "I'm a text\nOh A NEW LINE!"

* Change the text color: \c[color_name]
** "I'm white.\n\c[c_red]Now I become red!"

* Do shake action: \s[shake_type, shake_duration]
* shake_type: 0 - shake the screen | 1 - the following characters will be shaked.
* shake_duration: (unit: step)

* Change the following characters to floating or normal
** i am normal text.\n\fNow following texts are floating!\f\nI become normal again!

* let the next character wait for another steps: \t[wait_time].
* wait_time: (unit: step)
** I'm normal.\nI will wait for (nextCharInterval + wait_time) steps.\t[25]\nOver!

* Change the speaker: \p[instance_name]
* instance_name: the name of current dialogue speaker.(Make sure the number of speaker must be 1!)

*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>ds_queue_destroy(textSequence);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialize triangle
event_user(2);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Animation and dialogue interpreting
if animOpen || animClose
{
    rectSize[0] = targetRectSize[0];
    if animOpen rectSize[1] = EaseOutSine(animStepCounter / animTotalSteps, 0, targetRectSize[1], 1);
    if animClose rectSize[1] = EaseOutSine(animStepCounter / animTotalSteps, targetRectSize[1], 0, 1);
    animStepCounter++;
    if animStepCounter == animTotalSteps
    {
        animStepCounter = 0;
        if animClose
        {
            if ds_queue_empty(textSequence)
            {
                instance_destroy();
            }
            else
            {
                if newSpeaker != noone
                {
                    speaker = newSpeaker;
                    newSpeaker = noone;
                    event_user(2);
                }
                animClose = 0;
                event_user(1);
                exit;
            }
        }
        animOpen = false;
        animClose = false;
    }
}
else if curTextLength != -1
{
    if curTextCounter &lt;= curTextLength
    {
        if nextCharTimer == 0 &amp;&amp; nextCharTimerAdditional == 0
        {
            var _char = string_char_at(curText, curTextCounter);
            if _char == '\'
            {
                var _nextChar = string_char_at(curText, curTextCounter + 1);
                switch _nextChar
                {
                    case 'n': // next line
                        textPosY += string_height('H');
                        textPosX = 0;
                        curTextCounter += 2;
                        break;
                    case 's': // shake (need 2 parameters)
                        if shaking
                        {
                            // stop shaking
                            curTextCounter += 2;
                        }
                        else
                        {
                            // start shaking
                            var _parameter = scrGetParameters(curText, curTextCounter + 2);
                            shakingType = real(_parameter[1]);
                            shakingDuration = real(_parameter[2]);
                            curTextCounter += 2 + _parameter[0];
                            if shakingType == 0 shakingTimer = shakingDuration;
                        }
                        shaking = !shaking;
                        break;
                    case 'f': // the following characters will be floated.
                        floating = !floating;
                        curTextCounter += 2;
                        break;
                    case 'c': // change the following characters' colors.
                        var _parameter = scrGetParameters(curText, curTextCounter + 2);
                        curTextColor = scrGetColorFromString(_parameter[1]);
                        curTextCounter += 2 + _parameter[0];
                        break;
                    case 't': // wait for more time.
                        var _parameter = scrGetParameters(curText, curTextCounter + 2);
                        nextCharTimerAdditional = real(_parameter[1]);
                        curTextCounter += 2 + _parameter[0];
                        break;
                    case 'p': // change the speaker
                        var _parameter = scrGetParameters(curText, curTextCounter + 2);
                        newSpeaker = instance_find(asset_get_index(_parameter[1]), 0);
                        curTextCounter += 2 + _parameter[0];
                        break;
                    default:
                        show_error('Unknown command!', 1);
                }
            }
            else
            {
                var _inst = instance_create(rectPos[0] + rectMargin[2] + textPosX, rectPos[1] + rectMargin[0] + textPosY, obj_character);
                _inst.depth = depth - 1;
                if curTextColor == 99999 _inst.rainbowColor = true;
                else _inst.color = curTextColor;
                _inst.letter = _char;
                if shaking &amp;&amp; shakingType == 2 _inst.shake = 1;
                _inst.shakeDuration = shakingDuration;
                _inst.float = floating;
                textPosX += string_width(_char);
                curTextCounter++;
            }
            nextCharTimer = nextCharInterval;
        }
        else
        {
            if nextCharTimer &gt; 0
            {
                nextCharTimer--;
            }
            else if nextCharTimerAdditional &gt; 0
            {
                nextCharTimerAdditional--;
            }
        }
    }
    else if keyboard_check_pressed(vk_shift)
    {
        event_user(0);
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Roundrect position refreshing
rectPos[0] = triSideX[0] - rectSize[0] / 2 - rectMargin[2];// x position
rectPos[1] = triSideY[1] - rectSize[1];// y position
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Shake
if shakingTimer
{
    switch shakingType
    {
        case 0: // shake the screen.
            if shakingOriViewX == -1
            {
                shakingOriViewX = view_xview[view_current];
                shakingOriViewY = view_yview[view_current];
            }
            view_xview[view_current] = random_range(-abs(shakingVibration), abs(shakingVibration));
            view_yview[view_current] = random_range(-abs(shakingVibration), abs(shakingVibration));
            break;
    }
    shakingTimer--;
}
else
{
    if shakingTimer == 0
    {
        switch shakingType
        {
            case 0: // shake the screen.
                // reset the view
                view_xview[view_current] = shakingOriViewX;
                view_yview[view_current] = shakingOriViewY;
                break;
        }
        shakingTimer = -1;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="12">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// reset the position of dialogue
var _centerX = speaker.bbox_left + ((speaker.bbox_right - speaker.bbox_left) / 2);
var _centerY = speaker.bbox_top;
triSideX[0] = _centerX + lengthdir_x(triSideLength, 60);
triSideY[0] = _centerY - triOffsetY - lengthdir_y(triSideLength, 60);
triSideX[1] = _centerX + lengthdir_x(triSideLength, 120);
triSideY[1] = _centerY - triOffsetY - lengthdir_y(triSideLength, 120);
triSideX[2] = _centerX;
triSideY[2] = _centerY - triOffsetY + 10;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Start a dialogue
curText = ds_queue_dequeue(textSequence);
curTextLength = string_length(curText);
curTextCounter = 1;
nextCharTimer = 0;
// re-calculate rect size
targetRectSize = scrCalculateRect(curText, maximumWidth);
targetRectSize[0] += rectMargin[2] + rectMargin[3];
targetRectSize[1] += rectMargin[0] + rectMargin[1];
// reset parameters.
textPosX = 0; textPosY = 0;
curTextColor = c_white;
shaking = 0; shakingType = -1; shakingDuration = -1;
floating = 0;
// start open animation
animOpen = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// End a dialogue
// Let all letters fade
with obj_character event_user(0);
// reset the size of dialogue width
//targetRectSize[1] = 0;
animClose = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// start drawing
// reset draw parameter
draw_set_alpha(1);
draw_set_color(c_white);
// run the major draw function
scrDialogueDraw();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
